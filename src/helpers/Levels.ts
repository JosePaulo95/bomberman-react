import { Level } from "@/types";

function makeSquareMatrix(matrix: number[][]): number[][] {
    const numRows = matrix.length;
    const numCols = Math.max(...matrix.map(row => row.length)); // Encontra o nÃºmero mÃ¡ximo de colunas

    // Se o nÃºmero de linhas e colunas for o mesmo, jÃ¡ Ã© quadrada
    if (numRows === numCols) {
        return matrix;
    }

    // Para cada linha que estiver menor, adiciona 0s no final para completar
    const squareMatrix = matrix.map(row => {
        const newRow = [...row];
        while (newRow.length < numCols) {
            newRow.push(0); // Adiciona 0 atÃ© completar o nÃºmero mÃ¡ximo de colunas
        }
        return newRow;
    });

    // Adiciona linhas cheias de 0 atÃ© ficar quadrada
    while (squareMatrix.length < numCols) {
        squareMatrix.push(new Array(numCols).fill(0)); // Adiciona uma linha de 0s
    }

    return squareMatrix;
}

function convertStringMapToArray2D(map: string): number[][] {
    const emojiMap: { [key: string]: number } = {
        'â¬›': 0,  // Caixa cinza
        'ðŸŸ¦': 1,  // parede
        'â¬œ': 2,  // bloco quebravel
        'ðŸ”‘': 4,  // Chave
        'ðŸŸ¨': 5,  // Porta
    };

    // Remove espaÃ§os extras e divide a string em linhas
    const lines = map.trim().split('\n');

    // Mapeia cada linha para um array de nÃºmeros
    const result = lines.map(line => 
        Array.from(line.trim()).map(char => emojiMap[char] || 0)
    );
    debugger;
    return makeSquareMatrix(result);
}

export const createTerrainMap = (level: number): Level => {
    switch (level) {
        case 1:
            // Terreno misturado
            return {
                map: convertStringMapToArray2D(`
                â¬›â¬›â¬›â¬›â¬›â¬›â¬›â¬›â¬›â¬›â¬›
                â¬›ðŸŸ¦â¬›â¬›ðŸŸ¦â¬›â¬›â¬›â¬›â¬›â¬›
                â¬›â¬›ðŸ‘¨â¬›â¬›â¬›â¬›â¬›â¬›ðŸŸ¦â¬œ
                â¬›ðŸŸ¦â¬›â¬›â¬›ðŸŸ¨ðŸŸ¨â¬›â¬›â¬œðŸ”‘
                â¬›â¬›ðŸ‘©â¬›â¬›â¬›â¬›â¬›â¬›ðŸŸ¦â¬œ
                â¬›ðŸŸ¦â¬›â¬›ðŸŸ¦â¬›â¬›â¬›â¬›â¬›â¬›
                â¬›â¬›â¬›â¬›â¬›â¬›â¬›â¬›â¬›â¬›â¬›
                `)
            }
        case 2:
            // Terreno misturado
            return {
                map: convertStringMapToArray2D(`
                ðŸ‘¨â¬›â¬›â¬œâ¬œâ¬›â¬›â¬›â¬›â¬›â¬›
                â¬›ðŸŸ¦â¬›ðŸŸ¦â¬œðŸŸ¦â¬›ðŸŸ¦â¬›ðŸŸ¦â¬›
                â¬›â¬›â¬œâ¬›â¬›â¬›â¬›â¬›â¬›â¬›â¬›
                â¬›ðŸŸ¦â¬›ðŸŸ¦â¬œðŸŸ¦â¬œðŸŸ¦â¬›ðŸŸ¦â¬›
                ðŸŸ¨ðŸŸ¨â¬›â¬›â¬œâ¬›â¬›â¬›â¬›â¬œâ¬›
                â¬›ðŸŸ¦â¬›ðŸŸ¦â¬œðŸŸ¦â¬›ðŸŸ¦â¬›ðŸŸ¦â¬›
                â¬›â¬›â¬œâ¬›â¬›â¬›â¬œâ¬›â¬›â¬›â¬›
                â¬›ðŸŸ¦â¬›ðŸŸ¦â¬œðŸŸ¦â¬›ðŸŸ¦ðŸ”‘ðŸŸ¦â¬›
                ðŸ‘©â¬›â¬›â¬œâ¬œâ¬›â¬›â¬›â¬›â¬›â¬›
                `)
            }
        default:
            // Terreno padrÃ£o, todo 0
            return {
                map: convertStringMapToArray2D(`
                â¬›â¬›â¬›â¬›â¬›â¬›â¬›â¬›â¬›â¬›â¬›
                â¬›ðŸŸ¦â¬›â¬›ðŸŸ¦â¬›â¬›â¬›â¬›â¬›â¬›
                â¬›â¬›ðŸ‘¨â¬›â¬›â¬›â¬›â¬›â¬›ðŸŸ¦â¬œ
                â¬›ðŸŸ¦â¬›â¬›â¬›ðŸŸ¨ðŸŸ¨â¬›â¬›â¬œðŸ”‘
                â¬›â¬›ðŸ‘©â¬›â¬›â¬›â¬›â¬›â¬›ðŸŸ¦â¬œ
                â¬›ðŸŸ¦â¬›â¬›ðŸŸ¦â¬›â¬›â¬›â¬›â¬›â¬›
                â¬›â¬›â¬›â¬›â¬›â¬›â¬›â¬›â¬›â¬›â¬›
                `)
            }
    }
}
